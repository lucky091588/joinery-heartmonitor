<?php

/**
 * @file
 * Defince constant variables.
 */

define('HEARTMONITOR_WATCHDOG_MESSAGE_EMAIL_SENT', 'email notification');

/**
 * Implements variable_get.
 */
function _heartmonitor_variable_get($var, $defvar = '') {
  return variable_get($var, $defvar);
}

/**
 * Implements hook_menu().
 */
function heartmonitor_menu() {
  $items['admin/config/system/heartmonitor'] = array(
    'title' => 'Joinery Heartbeat Monitor',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('heartmonitor_admin_settings'),
    'access arguments' => array('administer heartmonitor module'),
    'description' => 'Heartbeat Monitor assumes that an external service is querying this site with intentionally nonexisten URLs to verify its uptime. At every cron run, Heartbeat Monitor will send an alert email if a suitable 404 message is not found in the log.',
    'file' => 'heartmonitor.admin.inc',
  );

  return $items;
}

/**
 * Implements hook_permission().
 */
function heartmonitor_permission() {
  return array(
    'administer heartmonitor module' => array(
      'title' => t('Administer Joinery Heartbeat Monitor module'),
      'description' => t('Perform administration tasks for Joinery Heartbeat Monitor module.'),
    ),
  );
}

/**
 * Implements hook_cron().
 */
function heartmonitor_cron() {
  // Get the variables from the admin settings form.
  $string_404 = _heartmonitor_variable_get('string_404', '');
  $min_age = _heartmonitor_variable_get('min_age', '');
  // Remove whitespace.
  $recipient_email = str_replace(
    ' ',
    '',
    _heartmonitor_variable_get('recipient_email', '')
  );
  $min_time = _heartmonitor_variable_get('min_time', '');
  // Get current time.
  $curr_time = time();

  // If min_age is 0, don't run the code.
  if ($min_age) {

    // Get last report log of heartmonitor email notification timestamp.
    $last_notified_time = db_query("SELECT timestamp FROM {watchdog} WHERE type='heartmonitor' AND message='" . HEARTMONITOR_WATCHDOG_MESSAGE_EMAIL_SENT . "' ORDER BY timestamp DESC LIMIT 1")->fetchField();

    // Add email notification due time.
    // This will determine the time you get the admin notification.
    $due_notified_time = $last_notified_time ? strtotime('+' . $min_time . ' minutes', $last_notified_time) : 0;

    // If current time is more than email notification due time, continue.
    if ($curr_time > $due_notified_time) {
      // Get last report log of 404 page timestamp in watchdog table.
      $last_404_time = db_query("SELECT timestamp FROM {watchdog} WHERE type='page not found' AND message LIKE '%" . $string_404 . "%' ORDER BY timestamp DESC LIMIT 1")->fetchField();

      // Run code if there is data.
      if ($last_404_time) {
        // Add cron time to the queried timestamp in report log to get due time.
        // Cron time is a predetermine value.
        $due_time = strtotime('+' . $min_age . ' minutes', $last_404_time);

        // If current time is more than the due time, send email.
        if ($curr_time > $due_time) {
          drupal_mail('heartmonitor', 'heartmonitor_email', $recipient_email, language_default());
          watchdog('heartmonitor', HEARTMONITOR_WATCHDOG_MESSAGE_EMAIL_SENT, array(), WATCHDOG_NOTICE);
        }
      }
    }
  }
}

/**
 * Implements hook_mail().
 */
function heartmonitor_mail($key, &$message, $params) {
  switch ($key) {
    case 'heartmonitor_email':
      $message['subject'] = t('Joinery Heartbeat Monitor notification');
      $message['body'][] = t('This is an email from the site @site-name', array('@site-name' => variable_get('site_name', 'localhost')));
      $message['body'][]  = t('The backup failed. Please check the site.');
      break;
  }
}
